{"version":3,"file":"extension.js","mappings":"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","sources":["../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap",".././src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nlet extensionContext: vscode.ExtensionContext;\r\nlet treeDataProvider: TreeDataProvider;\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\t\r\n\textensionContext = context;\r\n\ttreeDataProvider = new TreeDataProvider();\r\n\r\n\tvscode.window.registerTreeDataProvider('projectManagerTreeView', treeDataProvider);\r\n\r\n\tvscode.commands.registerCommand('vscode-project-manager.addProject', () => {\r\n\t\tcreateProjectEntry();\r\n\t});\r\n\r\n\tvscode.commands.registerCommand('vscode-project-manager.editEntry', (item) => {\r\n\t\t\r\n\t\tif(item.project === undefined && item.category !== undefined){\r\n\t\t\t// edit category\r\n\t\t\teditCategoryEntry(item.category._id);\r\n\t\t} else if(item.project !== undefined && item.category === undefined){\r\n\t\t\t// edit project\r\n\t\t\teditProjectEntry(item.project._id);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tvscode.commands.registerCommand('vscode-project-manager.deleteEntry', (item) => {\r\n\t\t\r\n\t\tvscode.window.showInformationMessage(\"You realy want to delete this?\", \"Yes\", \"No\").then(answer => {\r\n\t\t\tif (answer === \"Yes\") {\r\n\t\t\t\tif(item.project === undefined && item.category !== undefined){\r\n\t\t\t\t\t// delete category\r\n\t\t\t\t\tCategory.deleteById(item.category._id);\r\n\t\t\t\t} else if(item.project !== undefined && item.category === undefined){\r\n\t\t\t\t\t// delete project\r\n\t\t\t\t\tProject.deleteById(item.project._id);\r\n\t\t\t\t}\r\n\t\t\t\ttreeDataProvider.refresh();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tvscode.commands.registerCommand('vscode-project-manager.addCategory', () => {\r\n\t\tcreateCategoryEntry();\r\n\t});\r\n\r\n\tvscode.commands.registerCommand('vscode-project-manager.openInNewWindow', (item) => {\r\n\t\t\r\n\t\tlet projectPathUri = vscode.Uri.file(item.project._path);\r\n\t\tvscode.commands.executeCommand('vscode.openFolder', projectPathUri, {\r\n\t\t\tforceNewWindow: true\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tvscode.commands.registerCommand('vscode-project-manager.openInWindow', (project) => {\r\n\t\t\r\n\t\tlet projectObj = Project.getOneById(project);\r\n\r\n\t\tif(projectObj !== null){\r\n\r\n\t\t\tlet uri = vscode.Uri.file(projectObj._path);\r\n\t\t\tvscode.commands.executeCommand('vscode.openFolder', uri);\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n}\r\n\r\nasync function createProjectEntry(){\r\n\r\n\tif(vscode.workspace.workspaceFolders !== undefined && vscode.workspace.workspaceFolders?.length > 0){\r\n\r\n\t\tconst projectNameInput = await vscode.window.showInputBox({\r\n\t\t\tplaceHolder: 'Name',\r\n\t\t\tprompt: 'Please enter a name for the project that is shown in the sidebar'\r\n\t\t});\r\n\t\r\n\t\tif(projectNameInput !== undefined){\r\n\t\r\n\t\t\tif(projectNameInput === ''){\r\n\t\t\t\tvscode.window.showErrorMessage('A name for the project is required.');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tlet treeStrings = Category.getTreeStrings();\r\n\t\t\tlet quickpickOptions:Array<string> = ['No one'];\r\n\t\t\ttreeStrings.forEach(function(value){\r\n\t\t\t\tquickpickOptions.push(value._string);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst parentCategoryInput = await vscode.window.showQuickPick(quickpickOptions, {\r\n\t\t\t\ttitle: 'Enter a category name or leave it empty for no category'\r\n\t\t\t});\r\n\t\r\n\t\t\t// check which parent cat is selected\r\n\t\t\tlet parentCatId = 0;\r\n\t\t\ttreeStrings.forEach(function(value){\r\n\t\t\t\tif(value._string === parentCategoryInput){\r\n\t\t\t\t\tparentCatId = value._catId;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\t// get workspace opened folders\r\n\t\t\tlet projectPaths = Array<string>();\r\n\t\t\tvscode.workspace.workspaceFolders?.forEach(function(value){\r\n\t\t\t\tprojectPaths.push(value.uri.fsPath.toString());\r\n\t\t\t});\r\n\t\t\tlet projectPath = projectPaths[0];\r\n\t\t\t\r\n\t\t\tlet projectEntry = new Project(projectPath, projectNameInput, parentCatId);\r\n\t\t\tprojectEntry.save();\r\n\t\r\n\t\t\ttreeDataProvider.refresh();\r\n\t\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tvscode.window.showErrorMessage('One folder must been added to current workspace to save it.');\r\n\t}\r\n\r\n}\r\n\r\nasync function editCategoryEntry(categoryId:number){\r\n\r\n\tlet category:Category|null = Category.getOneById(categoryId);\r\n\r\n\tif(category !== null){\r\n\r\n\t\tconst categoryNameInput = await vscode.window.showInputBox({\r\n\t\t\tplaceHolder: 'Name',\r\n\t\t\tprompt: 'Please enter a name for the category that is shown in the sidebar',\r\n\t\t\tvalue: category?._name\r\n\t\t});\r\n\t\r\n\t\tif(categoryNameInput !== undefined){\r\n\t\r\n\t\t\tif(categoryNameInput === ''){\r\n\t\t\t\tvscode.window.showErrorMessage('A name for the category is required.');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet treeStrings = Category.getTreeStrings();\r\n\t\t\tlet quickpickOptions:Array<string> = ['No one'];\r\n\t\t\ttreeStrings.forEach(function(value){\r\n\t\t\t\tif(value._catId !== categoryId){\r\n\t\t\t\t\tquickpickOptions.push(value._string);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tconst parentCategoryInput = await vscode.window.showQuickPick(quickpickOptions, {\r\n\t\t\t\ttitle: 'Select a parent category or No one for a root category'\r\n\t\t\t});\r\n\t\r\n\t\t\t// check which parent cat is selected\r\n\t\t\tlet parentCatId = 0;\r\n\t\t\ttreeStrings.forEach(function(value){\r\n\t\t\t\tif(value._string === parentCategoryInput){\r\n\t\t\t\t\tparentCatId = value._catId;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tlet categoryEntry = new Category(categoryNameInput, parentCatId);\r\n\t\t\tcategoryEntry._id = category._id;\r\n\t\t\tcategoryEntry.save();\r\n\r\n\t\t\ttreeDataProvider.refresh();\r\n\t\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nasync function editProjectEntry(projectId:number){\r\n\r\n\tlet project:Project|null = Project.getOneById(projectId);\r\n\r\n\tif(project !== null){\r\n\r\n\t\tconst projectNameInput = await vscode.window.showInputBox({\r\n\t\t\tplaceHolder: 'Name',\r\n\t\t\tprompt: 'Please enter a name for the project that is shown in the sidebar',\r\n\t\t\tvalue: project._name\r\n\t\t});\r\n\r\n\t\tif(projectNameInput !== undefined){\r\n\r\n\t\t\tif(projectNameInput === ''){\r\n\t\t\t\tvscode.window.showErrorMessage('A name for the project is required.');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tlet treeStrings = Category.getTreeStrings();\r\n\t\t\tlet quickpickOptions:Array<string> = ['No one'];\r\n\t\t\ttreeStrings.forEach(function(value){\r\n\t\t\t\tquickpickOptions.push(value._string);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst parentCategoryInput = await vscode.window.showQuickPick(quickpickOptions, {\r\n\t\t\t\ttitle: 'Enter a category name or leave it empty for no category'\r\n\t\t\t});\r\n\t\r\n\t\t\t// check which parent cat is selected\r\n\t\t\tlet parentCatId = 0;\r\n\t\t\ttreeStrings.forEach(function(value){\r\n\t\t\t\tif(value._string === parentCategoryInput){\r\n\t\t\t\t\tparentCatId = value._catId;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\t// get workspace opened folders\r\n\t\t\tlet projectPaths = Array<string>();\r\n\t\t\tvscode.workspace.workspaceFolders?.forEach(function(value){\r\n\t\t\t\tprojectPaths.push(value.uri.fsPath.toString());\r\n\t\t\t});\r\n\t\t\tlet projectPath = projectPaths[0];\r\n\t\t\t\r\n\t\t\tlet editProject = new Project(projectPath, projectNameInput, parentCatId);\r\n\t\t\teditProject._id = project._id;\r\n\t\t\teditProject.save();\r\n\r\n\t\t\ttreeDataProvider.refresh();\r\n\t\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nasync function createCategoryEntry(){\r\n\r\n\tconst categoryNameInput = await vscode.window.showInputBox({\r\n\t\tplaceHolder: 'Name',\r\n\t\tprompt: 'Please enter a name for the category that is shown in the sidebar'\r\n\t});\r\n\r\n\tif(categoryNameInput !== undefined){\r\n\r\n\t\tif(categoryNameInput === ''){\r\n\t\t\tvscode.window.showErrorMessage('A name for the category is required.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet treeStrings = Category.getTreeStrings();\r\n\t\tlet quickpickOptions:Array<string> = ['No one'];\r\n\t\ttreeStrings.forEach(function(value){\r\n\t\t\tquickpickOptions.push(value._string);\r\n\t\t});\r\n\r\n\t\tconst parentCategoryInput = await vscode.window.showQuickPick(quickpickOptions, {\r\n\t\t\ttitle: 'Select a parent category or No one for a root category'\r\n\t\t});\r\n\r\n\t\t// check which parent cat is selected\r\n\t\tlet parentCatId = 0;\r\n\t\ttreeStrings.forEach(function(value){\r\n\t\t\tif(value._string === parentCategoryInput){\r\n\t\t\t\tparentCatId = value._catId;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tlet categoryEntry = new Category(categoryNameInput, parentCatId);\r\n\t\tcategoryEntry.save();\r\n\r\n\t\ttreeDataProvider.refresh();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function deactivate() {}\r\n\r\nclass TreeDataProvider implements vscode.TreeDataProvider<TreeItem> {\r\n\t\r\n\tprivate _onDidChangeTreeData: vscode.EventEmitter<TreeItem | undefined | null | void> = new vscode.EventEmitter<TreeItem | undefined | null | void>();\r\n\treadonly onDidChangeTreeData: vscode.Event<TreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\r\n  \r\n\trefresh(): void {\r\n\t\tthis.data = Category.getTreeItemsWithProjects();\r\n\t  \tthis._onDidChangeTreeData.fire();\r\n\t}\r\n\r\n\tdata: TreeItem[];\r\n  \r\n\tconstructor() {\r\n\t\tthis.data = Category.getTreeItemsWithProjects();\r\n\t}\r\n  \r\n\tgetTreeItem(element: TreeItem): vscode.TreeItem|Thenable<vscode.TreeItem> {\r\n\t  \treturn element;\r\n\t}\r\n  \r\n\tgetChildren(element?: TreeItem|undefined): vscode.ProviderResult<TreeItem[]> {\r\n\t  \tif(element === undefined){\r\n\t\t\treturn this.data;\r\n\t  \t}\r\n\t  \treturn element.children;\r\n\t}\r\n\r\n}\r\n  \r\nclass TreeItem extends vscode.TreeItem {\r\n\t\r\n\tchildren: TreeItem[]|undefined;\r\n\tproject?: Project;\r\n\tcategory?: Category;\r\n  \r\n\tconstructor(label: string, children?: TreeItem[], project?: Project, category?: Category) {\r\n\t  \tsuper(\r\n\t\t  \tlabel,\r\n\t\t  \tchildren === undefined ? vscode.TreeItemCollapsibleState.None :\r\n\t\t\t\t\t\t\t\t\t\tvscode.TreeItemCollapsibleState.Expanded\r\n\t\t);\r\n\t \tthis.children = children;\r\n\t  \tthis.project = project;\r\n\t\tthis.category = category;\r\n\t\t\r\n\t\tif(this.project === undefined){\r\n\t\t\tthis.iconPath = new vscode.ThemeIcon(\"layers\");\r\n\t\t\tthis.contextValue = 'TreeItemCategory';\r\n\t\t} else {\r\n\t\t\tthis.iconPath = new vscode.ThemeIcon(\"folder\");\r\n\t\t\tthis.contextValue = 'TreeItemProject';\r\n\t\t\tthis.command = {\r\n\t\t\t\tcommand: 'vscode-project-manager.openInWindow',\r\n\t\t\t\ttitle: 'openInWindow',\r\n\t\t\t\targuments: [this.project?._id]\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t}\t  \r\n\r\n}\r\n\r\nclass Project {\r\n\r\n\t_id: number;\r\n\t_path: string;\r\n\t_name: string;\r\n\t_categoryId: number;\r\n\r\n\tconstructor(path: string, name: string, categoryId: number = 0){\r\n\t\tthis._id = this.getNextId();\r\n\t\tthis._path = path;\r\n\t\tthis._name = name;\r\n\t\tthis._categoryId = categoryId;\r\n\t}\r\n\r\n\tprivate getNextId(){\r\n\r\n\t\tlet latestId = 0;\r\n\t\tconst existingProjects = Project.getAll();\r\n\t\texistingProjects.forEach(function(value){\r\n\t\t\tif(value._id > latestId){\r\n\t\t\t\tlatestId = value._id;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn latestId + 1;\r\n\r\n\t}\r\n\r\n\tsave(){\r\n\r\n\t\t// check if folders and files exist\r\n\t\tProject.checkFolderandFiles();\r\n\t\t\r\n\t\t// read projects.json and add the project\r\n\t\tlet existingProjects:Array<Project> = Project.getAll();\r\n\t\tfor(let i = 0; i < existingProjects.length; i++){\r\n\t\t\tif(this._id === existingProjects[i]._id){\r\n\t\t\t\texistingProjects.splice(i,1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\texistingProjects.push(this);\r\n\r\n\t\t// write data to projects.json\r\n\t\tfs.writeFileSync(\r\n\t\t\tpath.join(extensionContext.globalStorageUri.fsPath.toString(), 'projects.json'),\r\n\t\t\tJSON.stringify(existingProjects));\r\n\r\n\t}\r\n\r\n\tpublic static deleteById(projectId:number){\r\n\r\n\t\t// check if folders and files exist\r\n\t\tProject.checkFolderandFiles();\r\n\t\t\r\n\t\t// read projects.json and add the project\r\n\t\tlet existingProjects:Array<Project> = Project.getAll();\r\n\t\tfor(let i = 0; i < existingProjects.length; i++){\r\n\t\t\tif(existingProjects[i]._id === projectId){\r\n\t\t\t\texistingProjects.splice(i,1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// write data to projects.json\r\n\t\tfs.writeFileSync(\r\n\t\t\tpath.join(extensionContext.globalStorageUri.fsPath.toString(), 'projects.json'),\r\n\t\t\tJSON.stringify(existingProjects));\r\n\r\n\t}\r\n\r\n\tpublic static getOneById(projectId: number):Project|null {\r\n\r\n\t\tlet projects: Array<Project> = Project.getAll();\r\n\t\tlet searchedProject = null;\r\n\t\tprojects.forEach(function(value){\r\n\t\t\tif(value._id === projectId){\r\n\t\t\t\tsearchedProject = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn searchedProject;\r\n\r\n\t}\r\n\r\n\tpublic static getAllByCategoryId(catId: number){\r\n\r\n\t\tlet projects: Array<Project> = Project.getAll();\r\n\t\tlet projectsByCat: Array<Project> = [];\r\n\t\tprojects.forEach(function(value){\r\n\t\t\tif(value._categoryId === catId){\r\n\t\t\t\tprojectsByCat.push(value);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn projectsByCat;\r\n\r\n\t}\r\n\r\n\tpublic static getAll(){\r\n\r\n\t\t// check if folders and files exist\r\n\t\tProject.checkFolderandFiles();\r\n\r\n\t\tlet existingProjects:Array<Project> = JSON.parse(fs.readFileSync(path.join(extensionContext.globalStorageUri.fsPath.toString(), 'projects.json')).toString());\r\n\t\treturn existingProjects;\r\n\r\n\t}\r\n\r\n\tpublic static checkFolderandFiles(){\r\n\r\n\t\t// create extension global storage folder if not exist\r\n\t\tif (!fs.existsSync(extensionContext.globalStorageUri.fsPath.toString())) {\r\n\t\t\tfs.mkdirSync(extensionContext.globalStorageUri.fsPath.toString());\r\n\t\t}\r\n\r\n\t\t// check if projects file exist and if not create it\r\n\t\tif (!fs.existsSync(path.join(extensionContext.globalStorageUri.fsPath.toString(), 'projects.json'))) {\r\n\t\t\tfs.writeFileSync(\r\n\t\t\t\tpath.join(extensionContext.globalStorageUri.fsPath.toString(), 'projects.json'),\r\n\t\t\t\tJSON.stringify([]));\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Category {\r\n\r\n\t_id: number;\r\n\t_parentId: number;\r\n\t_name: string;\r\n\tchildren: Array<Category>;\r\n\r\n\tconstructor(name: string, parentId: number){\r\n\r\n\t\tthis._id = this.getNextId();\r\n\t\tthis._parentId = parentId;\r\n\t\tthis._name = name;\r\n\t\tthis.children = [];\r\n\r\n\t}\r\n\r\n\tsave(){\r\n\r\n\t\t// check if folders and files exist\r\n\t\tCategory.checkFolderandFiles();\r\n\t\t\r\n\t\t// read categories.json and add the category\r\n\t\tlet existingCategories:Array<Category> = Category.getAll();\r\n\t\tfor(let i = 0; i < existingCategories.length; i++){\r\n\t\t\tif(this._id === existingCategories[i]._id){\r\n\t\t\t\texistingCategories.splice(i,1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texistingCategories.push(this);\r\n\r\n\t\t// write data to categories.json\r\n\t\tfs.writeFileSync(\r\n\t\t\tpath.join(extensionContext.globalStorageUri.fsPath.toString(), 'categories.json'),\r\n\t\t\tJSON.stringify(existingCategories));\r\n\r\n\t}\r\n\r\n\tpublic static deleteById(categoryId:number){\r\n\r\n\t\t// check if folders and files exist\r\n\t\tCategory.checkFolderandFiles();\r\n\t\t\r\n\t\t// read categories.json and remove the project\r\n\t\tlet existingCategories:Array<Category> = Category.getAll();\r\n\t\tfor(let i = 0; i < existingCategories.length; i++){\r\n\t\t\tif(existingCategories[i]._id === categoryId){\r\n\t\t\t\texistingCategories.splice(i,1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// write data to projects.json\r\n\t\tfs.writeFileSync(\r\n\t\t\tpath.join(extensionContext.globalStorageUri.fsPath.toString(), 'categories.json'),\r\n\t\t\tJSON.stringify(existingCategories));\r\n\r\n\t\t// change projects category id if the current id is the deleted id\r\n\t\tlet existingProjects:Array<Project> = Project.getAll();\r\n\t\texistingProjects.forEach(function(value){\r\n\t\t\tif(value._categoryId === categoryId){\r\n\t\t\t\tvalue._categoryId = 0;\r\n\t\t\t\tvalue.save();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tprivate getNextId(){\r\n\r\n\t\tlet latestId = 0;\r\n\t\tconst existingCategories = Category.getAll();\r\n\t\texistingCategories.forEach(function(value){\r\n\t\t\tif(value._id > latestId){\r\n\t\t\t\tlatestId = value._id;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn latestId + 1;\r\n\r\n\t}\r\n\r\n\tpublic static getTreeStrings():Array<TreeString>{\r\n\r\n\t\tlet categories = Category.getAll();\r\n\t\t\r\n\t\tlet strings:Array<TreeString> = [];\r\n\t\tcategories.forEach(function(value){\r\n\t\t\tlet arrowname = Category.createArrowName(value, categories);\r\n\t\t\tstrings.push(new TreeString(arrowname, value._id));\r\n\t\t});\r\n\r\n\t\treturn strings;\r\n\r\n\t}\r\n\r\n\tprivate static createArrowName(category:Category, categories:Array<Category>){\r\n\r\n\t\tlet arrowname = category._name;\r\n\t\tif(category._parentId !== 0){\r\n\t\t\tcategories.forEach(function(value){\r\n\t\t\t\tif(value._id === category._parentId){\r\n\t\t\t\t\tif(value._parentId !== 0){\r\n\t\t\t\t\t\tarrowname = Category.createArrowName(value, categories) + ' < ' + arrowname;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tarrowname = value._name + ' < ' + arrowname;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn arrowname;\r\n\r\n\t}\r\n\r\n\tprivate static makeTree(categoryNodes: Category[]): Category[] {\r\n\r\n\t\tconst nodesMap = new Map<number, Category>(\r\n\t\t\tcategoryNodes.map(node => [node._id, node])\r\n\t\t);\r\n\t\r\n\t\tconst virtualRoot = { } as Partial<Category>;\r\n\t\tcategoryNodes.forEach((node, i) => {\r\n\t\t\tconst parent = nodesMap.get(node._parentId) ?? virtualRoot;\r\n\t\t\t(parent.children ??= []).push(node);\r\n\t\t});\r\n\t\r\n\t\treturn virtualRoot.children ?? [];\r\n\t}\r\n\r\n\tpublic static getTreeItemsWithProjects(){\r\n\r\n\t\tlet catTree: Array<Category> = Category.makeTree(Category.getAll());\r\n\t\tlet treeItems:Array<TreeItem> = [];\r\n\t\tcatTree.forEach(function(value){\r\n\t\t\ttreeItems.push(Category.createTreeItem(value));\r\n\t\t});\r\n\t\t// add tree items where not in a category\r\n\t\tlet projects = Project.getAllByCategoryId(0);\r\n\t\tprojects.forEach(function(value){\r\n\t\t\ttreeItems.push(new TreeItem(value._name, undefined, value));\r\n\t\t});\r\n\r\n\t\treturn treeItems;\r\n\r\n\t}\r\n\r\n\tprivate static createTreeItem(category: Category){\r\n\r\n\t\tlet children:Array<TreeItem> = [];\r\n\t\t// add cat childs\r\n\t\tif(category.children !== undefined){\r\n\t\t\tcategory.children.forEach(function(value){\r\n\t\t\t\tchildren.push(Category.createTreeItem(value));\r\n\t\t\t});\r\n\t\t}\r\n\t\t// add project childs\r\n\t\tlet projects = Project.getAllByCategoryId(category._id);\r\n\t\tprojects.forEach(function(value){\r\n\t\t\tchildren.push(new TreeItem(value._name, undefined, value));\r\n\t\t});\r\n\r\n\t\tlet treeItem = new TreeItem(category._name, children, undefined, category);\r\n\t\treturn treeItem;\r\n\r\n\t}\r\n\r\n\tpublic static getAll(){\r\n\r\n\t\t// check if folders and files exist\r\n\t\tCategory.checkFolderandFiles();\r\n\r\n\t\tlet existingCategories:Array<Category> = JSON.parse(fs.readFileSync(path.join(extensionContext.globalStorageUri.fsPath.toString(), 'categories.json')).toString());\r\n\t\treturn existingCategories;\r\n\r\n\t}\r\n\r\n\tpublic static getOneById(categoryId: number):Category|null {\r\n\r\n\t\tlet categories: Array<Category> = Category.getAll();\r\n\t\tlet searchedCategory = null;\r\n\t\tcategories.forEach(function(value){\r\n\t\t\tif(value._id === categoryId){\r\n\t\t\t\tsearchedCategory = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn searchedCategory;\r\n\r\n\t}\r\n\r\n\tpublic static checkFolderandFiles(){\r\n\r\n\t\t// create extension global storage folder if not exist\r\n\t\tif (!fs.existsSync(extensionContext.globalStorageUri.fsPath.toString())) {\r\n\t\t\tfs.mkdirSync(extensionContext.globalStorageUri.fsPath.toString());\r\n\t\t}\r\n\r\n\t\t// check if projects file exist and if not create it\r\n\t\tif (!fs.existsSync(path.join(extensionContext.globalStorageUri.fsPath.toString(), 'categories.json'))) {\r\n\t\t\tfs.writeFileSync(\r\n\t\t\t\tpath.join(extensionContext.globalStorageUri.fsPath.toString(), 'categories.json'),\r\n\t\t\t\tJSON.stringify([]));\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass TreeString {\r\n\r\n\t_string: string;\r\n\t_catId: number;\r\n\r\n\tconstructor(string: string, catId: number){\r\n\t\tthis._string = string;\r\n\t\tthis._catId = catId;\r\n\t}\r\n\r\n}"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","extensionContext","treeDataProvider","context","TreeDataProvider","vscode","window","registerTreeDataProvider","commands","registerCommand","async","workspace","workspaceFolders","length","projectNameInput","showInputBox","placeHolder","prompt","showErrorMessage","treeStrings","Category","getTreeStrings","quickpickOptions","forEach","value","push","_string","parentCategoryInput","showQuickPick","title","parentCatId","_catId","projectPaths","Array","uri","fsPath","toString","projectPath","Project","save","refresh","createProjectEntry","item","project","category","categoryId","getOneById","categoryNameInput","_name","categoryEntry","_id","editCategoryEntry","projectId","editProject","editProjectEntry","showInformationMessage","then","answer","deleteById","createCategoryEntry","projectPathUri","Uri","file","_path","executeCommand","forceNewWindow","projectObj","constructor","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","data","getTreeItemsWithProjects","fire","getTreeItem","element","getChildren","children","TreeItem","label","super","TreeItemCollapsibleState","None","Expanded","iconPath","ThemeIcon","contextValue","command","arguments","path","name","getNextId","_categoryId","latestId","getAll","checkFolderandFiles","existingProjects","i","splice","fs","writeFileSync","join","globalStorageUri","JSON","stringify","static","projects","searchedProject","catId","projectsByCat","parse","readFileSync","existsSync","mkdirSync","parentId","_parentId","existingCategories","categories","strings","arrowname","createArrowName","TreeString","categoryNodes","nodesMap","Map","map","node","virtualRoot","parent","get","catTree","makeTree","treeItems","createTreeItem","getAllByCategoryId","searchedCategory","string"],"sourceRoot":""}