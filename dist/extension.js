(()=>{"use strict";var e={496:e=>{e.exports=require("vscode")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}var o={};(()=>{var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=r(496),i=r(147),n=r(17);let a,s;e.activate=function(e){a=e,s=new c,t.window.registerTreeDataProvider("projectManagerTreeView",s),t.commands.registerCommand("vscode-project-manager.addProject",(()=>{!async function(){if(void 0!==t.workspace.workspaceFolders&&t.workspace.workspaceFolders?.length>0){const e=await t.window.showInputBox({placeHolder:"Name",prompt:"Please enter a name for the project that is shown in the sidebar"});if(void 0!==e){if(""===e)return void t.window.showErrorMessage("A name for the project is required.");let r=g.getTreeStrings(),o=["No one"];r.forEach((function(e){o.push(e._string)}));const i=await t.window.showQuickPick(o,{title:"Enter a category name or leave it empty for no category"});let n=0;r.forEach((function(e){e._string===i&&(n=e._catId)}));let a=Array();t.workspace.workspaceFolders?.forEach((function(e){a.push(e.uri.fsPath.toString())}));let c=a[0];new l(c,e,n).save(),s.refresh()}}else t.window.showErrorMessage("One folder must been added to current workspace to save it.")}()})),t.commands.registerCommand("vscode-project-manager.editEntry",(e=>{void 0===e.project&&void 0!==e.category?async function(e){let r=g.getOneById(e);if(null!==r){const o=await t.window.showInputBox({placeHolder:"Name",prompt:"Please enter a name for the category that is shown in the sidebar",value:r?._name});if(void 0!==o){if(""===o)return void t.window.showErrorMessage("A name for the category is required.");let i=g.getTreeStrings(),n=["No one"];i.forEach((function(t){t._catId!==e&&n.push(t._string)}));const a=await t.window.showQuickPick(n,{title:"Select a parent category or No one for a root category"});let c=0;i.forEach((function(e){e._string===a&&(c=e._catId)}));let d=new g(o,c);d._id=r._id,d.save(),s.refresh()}}}(e.category._id):void 0!==e.project&&void 0===e.category&&async function(e){let r=l.getOneById(e);if(null!==r){const e=await t.window.showInputBox({placeHolder:"Name",prompt:"Please enter a name for the project that is shown in the sidebar",value:r._name});if(void 0!==e){if(""===e)return void t.window.showErrorMessage("A name for the project is required.");let o=g.getTreeStrings(),i=["No one"];o.forEach((function(e){i.push(e._string)}));const n=await t.window.showQuickPick(i,{title:"Enter a category name or leave it empty for no category"});let a=0;o.forEach((function(e){e._string===n&&(a=e._catId)}));let c=Array();t.workspace.workspaceFolders?.forEach((function(e){c.push(e.uri.fsPath.toString())}));let d=c[0],h=new l(d,e,a);h._id=r._id,h.save(),s.refresh()}}}(e.project._id)})),t.commands.registerCommand("vscode-project-manager.deleteEntry",(e=>{t.window.showInformationMessage("You realy want to delete this?","Yes","No").then((t=>{"Yes"===t&&(void 0===e.project&&void 0!==e.category?g.deleteById(e.category._id):void 0!==e.project&&void 0===e.category&&l.deleteById(e.project._id),s.refresh())}))})),t.commands.registerCommand("vscode-project-manager.addCategory",(()=>{!async function(){const e=await t.window.showInputBox({placeHolder:"Name",prompt:"Please enter a name for the category that is shown in the sidebar"});if(void 0!==e){if(""===e)return void t.window.showErrorMessage("A name for the category is required.");let r=g.getTreeStrings(),o=["No one"];r.forEach((function(e){o.push(e._string)}));const i=await t.window.showQuickPick(o,{title:"Select a parent category or No one for a root category"});let n=0;r.forEach((function(e){e._string===i&&(n=e._catId)})),new g(e,n).save(),s.refresh()}}()})),t.commands.registerCommand("vscode-project-manager.openInNewWindow",(e=>{let r=t.Uri.file(e.project._path);t.commands.executeCommand("vscode.openFolder",r,{forceNewWindow:!0})})),t.commands.registerCommand("vscode-project-manager.openInWindow",(e=>{let r=l.getOneById(e);if(null!==r){let e=t.Uri.file(r._path);t.commands.executeCommand("vscode.openFolder",e)}}))},e.deactivate=function(){};class c{constructor(){this._onDidChangeTreeData=new t.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.data=g.getTreeItemsWithProjects()}refresh(){this.data=g.getTreeItemsWithProjects(),this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return void 0===e?this.data:e.children}}class d extends t.TreeItem{constructor(e,r,o,i){super(e,void 0===r?t.TreeItemCollapsibleState.None:t.TreeItemCollapsibleState.Expanded),this.children=r,this.project=o,this.category=i,void 0===this.project?(this.iconPath=new t.ThemeIcon("layers"),this.contextValue="TreeItemCategory"):(this.iconPath=new t.ThemeIcon("folder"),this.contextValue="TreeItemProject",this.command={command:"vscode-project-manager.openInWindow",title:"openInWindow",arguments:[this.project?._id]})}}class l{constructor(e,t,r=0){this._id=this.getNextId(),this._path=e,this._name=t,this._categoryId=r}getNextId(){let e=0;return l.getAll().forEach((function(t){t._id>e&&(e=t._id)})),e+1}save(){l.checkFolderandFiles();let e=l.getAll();for(let t=0;t<e.length;t++)this._id===e[t]._id&&e.splice(t,1);e.push(this),i.writeFileSync(n.join(a.globalStorageUri.fsPath.toString(),"projects.json"),JSON.stringify(e))}static deleteById(e){l.checkFolderandFiles();let t=l.getAll();for(let r=0;r<t.length;r++)t[r]._id===e&&t.splice(r,1);i.writeFileSync(n.join(a.globalStorageUri.fsPath.toString(),"projects.json"),JSON.stringify(t))}static getOneById(e){let t=l.getAll(),r=null;return t.forEach((function(t){t._id===e&&(r=t)})),r}static getAllByCategoryId(e){let t=l.getAll(),r=[];return t.forEach((function(t){t._categoryId===e&&r.push(t)})),r}static getAll(){return l.checkFolderandFiles(),JSON.parse(i.readFileSync(n.join(a.globalStorageUri.fsPath.toString(),"projects.json")).toString())}static checkFolderandFiles(){i.existsSync(a.globalStorageUri.fsPath.toString())||i.mkdirSync(a.globalStorageUri.fsPath.toString()),i.existsSync(n.join(a.globalStorageUri.fsPath.toString(),"projects.json"))||i.writeFileSync(n.join(a.globalStorageUri.fsPath.toString(),"projects.json"),JSON.stringify([]))}}class g{constructor(e,t){this._id=this.getNextId(),this._parentId=t,this._name=e,this.children=[]}save(){g.checkFolderandFiles();let e=g.getAll();for(let t=0;t<e.length;t++)this._id===e[t]._id&&e.splice(t,1);e.push(this),i.writeFileSync(n.join(a.globalStorageUri.fsPath.toString(),"categories.json"),JSON.stringify(e))}static deleteById(e){g.checkFolderandFiles();let t=g.getAll();for(let r=0;r<t.length;r++)t[r]._id===e&&t.splice(r,1);i.writeFileSync(n.join(a.globalStorageUri.fsPath.toString(),"categories.json"),JSON.stringify(t)),l.getAll().forEach((function(t){t._categoryId===e&&(t._categoryId=0,t.save())}))}getNextId(){let e=0;return g.getAll().forEach((function(t){t._id>e&&(e=t._id)})),e+1}static getTreeStrings(){let e=g.getAll(),t=[];return e.forEach((function(r){let o=g.createArrowName(r,e);t.push(new h(o,r._id))})),t}static createArrowName(e,t){let r=e._name;return 0!==e._parentId&&t.forEach((function(o){o._id===e._parentId&&(r=0!==o._parentId?g.createArrowName(o,t)+" < "+r:o._name+" < "+r)})),r}static makeTree(e){const t=new Map(e.map((e=>[e._id,e]))),r={};return e.forEach(((e,o)=>{const i=t.get(e._parentId)??r;(i.children??(i.children=[])).push(e)})),r.children??[]}static getTreeItemsWithProjects(){let e=g.makeTree(g.getAll()),t=[];return e.forEach((function(e){t.push(g.createTreeItem(e))})),l.getAllByCategoryId(0).forEach((function(e){t.push(new d(e._name,void 0,e))})),t}static createTreeItem(e){let t=[];return void 0!==e.children&&e.children.forEach((function(e){t.push(g.createTreeItem(e))})),l.getAllByCategoryId(e._id).forEach((function(e){t.push(new d(e._name,void 0,e))})),new d(e._name,t,void 0,e)}static getAll(){return g.checkFolderandFiles(),JSON.parse(i.readFileSync(n.join(a.globalStorageUri.fsPath.toString(),"categories.json")).toString())}static getOneById(e){let t=g.getAll(),r=null;return t.forEach((function(t){t._id===e&&(r=t)})),r}static checkFolderandFiles(){i.existsSync(a.globalStorageUri.fsPath.toString())||i.mkdirSync(a.globalStorageUri.fsPath.toString()),i.existsSync(n.join(a.globalStorageUri.fsPath.toString(),"categories.json"))||i.writeFileSync(n.join(a.globalStorageUri.fsPath.toString(),"categories.json"),JSON.stringify([]))}}class h{constructor(e,t){this._string=e,this._catId=t}}})(),module.exports=o})();